version: '2.1'

services:

  zammad: &zammad
    build:
      context: .
      dockerfile: docker/containers/zammad/Dockerfile
      args:
        BUNDLE_WITHOUT: ${BUNDLE_WITHOUT}
        ZAMMAD_USER: ${ZAMMAD_USER}
    depends_on:
      zammad-memcached: {"condition": "service_healthy"}
      zammad-elasticsearch: {"condition": "service_healthy"}
      zammad-postgresql: {"condition": "service_healthy"}
    env_file: .env

    entrypoint: ["/docker-entrypoint.sh"]
    command: ["zammad-init"]
    healthcheck:
      test: bash -c "[ -f /opt/zammad/tmp/zammad.ready ]" || exit 1
      interval: 10s
      timeout: 1s
      retries: 60
    image: zammad${IMAGE_VERSION}

    # use tmpfs for tmp and log for performance and to allow
    # multiple builds in parallel. Both directories are mounted
    # into the image AFTER the working directory is mounted.
    # tmpfs: ["/opt/zammad/tmp", "/opt/zammad/log"]

  # zammad app services
  zammad-railsserver:
    <<: *zammad
    command: ["zammad-railsserver"]
    depends_on:
      zammad: {"condition": "service_healthy"}
    healthcheck:
      test: ps aux | grep puma || exit 1
      interval: 10s
      timeout: 1s
      retries: 60

  zammad-scheduler:
    <<: *zammad
    command: ["zammad-scheduler"]
    depends_on:
      zammad-memcached: {"condition": "service_healthy"}
      zammad-railsserver: {"condition": "service_healthy"}
    restart: ${RESTART}
    volumes:
      - zammad-data:/opt/zammad

  zammad-websocket:
    <<: *zammad
    command: ["zammad-websocket"]
    depends_on:
      zammad-memcached: {"condition": "service_healthy"}
      zammad-railsserver: {"condition": "service_healthy"}
    healthcheck:
      test: ps aux | grep websocket-server || exit 1
      interval: 10s
      timeout: 1s
      retries: 60

    restart: ${RESTART}
    volumes:
      - zammad-data:/opt/zammad

  zammad-nginx:
    <<: *zammad
    command: ["zammad-nginx"]
    depends_on:
      zammad-railsserver: {"condition": "service_healthy"}
      zammad-websocket: {"condition": "service_healthy"}
    restart: ${RESTART}
    volumes:
      - zammad-data:/opt/zammad
    expose:
      - "80"

  # other services
  zammad-elasticsearch:
    build: docker/containers/zammad-elasticsearch
    image: zammad-elasticsearch${IMAGE_VERSION}
    restart: ${RESTART}
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail zammad-elasticsearch:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 60
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  zammad-memcached:
    build: docker/containers/zammad-memcached
    environment:
      MEMCACHED_SIZE: ${MEMCACHED_SIZE}
    image: zammad-memcached${IMAGE_VERSION}
    restart: ${RESTART}
    healthcheck:
      test: pidof memcached || exit 1
      interval: 10s
      timeout: 2s
      retries: 60

  zammad-postgresql:
    build: docker/containers/zammad-postgresql
    image: zammad-postgresql${IMAGE_VERSION}
    restart: ${RESTART}
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  # testing
  zammad-testing:
    <<: *zammad
    command: ['zammad-testing']
    environment:
      RAILS_ENV: "test"
    volumes: [".:/opt/zammad"]

  #  spring:
  #    <<: *zammad
  #    entrypoint: bash -c
  #    command: ["bundle", "exec", "spring server"]

volumes:
  elasticsearch-data:
    driver: local
  postgresql-data:
    driver: local
  zammad-data:
    driver: local
